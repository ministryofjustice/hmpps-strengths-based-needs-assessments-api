<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ConstructorParameterNaming:AssessmentResponse.kt$AssessmentMetadata$val oasys_pks: List&lt;String&gt;</ID>
    <ID>ConstructorParameterNaming:AssessmentVersion.kt$AssessmentVersion$@Type(JsonType::class) @Column(name = "oasys_equivalent") var oasys_equivalent: OasysEquivalent = mutableMapOf()</ID>
    <ID>EmptyDefaultConstructor:SubjectController.kt$SubjectController$()</ID>
    <ID>EmptyFunctionBlock:SessionService.kt$SessionService${}</ID>
    <ID>LongParameterList:JwtAuthHelper.kt$JwtAuthHelper$( subject: String, fullName: String = "Full Name", scope: List&lt;String&gt;? = listOf(), roles: List&lt;String&gt;? = listOf(), expiryTime: Duration = Duration.ofHours(1), jwtId: String = UUID.randomUUID().toString(), grantType: String = "authorization_code", )</ID>
    <ID>LongParameterList:Session.kt$Session$( @Id @Column(name = "id") @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Long? = null, @Column(name = "uuid") val uuid: UUID = UUID.randomUUID(), @Column(name = "created_at") val createdAt: LocalDateTime = LocalDateTime.now(), @Column(name = "user_id") val userSessionId: String = "", @Column(name = "user_access") @Enumerated(EnumType.STRING) val userAccess: UserAccess = UserAccess.READ_ONLY, @Column(name = "user_display_name") val userDisplayName: String = "", @Column(name = "link_status") @Enumerated(EnumType.STRING) var linkStatus: LinkStatus = LinkStatus.UNUSED, @Column(name = "link_uuid") val linkUuid: UUID = UUID.randomUUID(), @ManyToOne @JoinColumn(name = "assessment_uuid", referencedColumnName = "uuid") val oasysAssessment: OasysAssessment = OasysAssessment(), )</ID>
    <ID>MagicNumber:FormConfigProvider.kt$FormConfigProvider$200</ID>
    <ID>MaxLineLength:AccommodationTest.kt$AccommodationTest$)</ID>
    <ID>MaxLineLength:AnswersProvider.kt$AnswersProvider$throw InvalidMappingException("$valueName is not a valid option for field $fieldName in form config version ${config.version}")</ID>
    <ID>MaxLineLength:AnswersProviderTest.kt$AnswersProviderTest.Get$assertEquals("NO_ACCOMMODATION is not a valid option for field suitable_housing in form config version 1.0", exception.message)</ID>
    <ID>MaxLineLength:AssessmentController.kt$AssessmentController$@Parameter(description = "Timestamp after which the latest assessment should be returned", `in` = ParameterIn.QUERY, example = "1706879012")</ID>
    <ID>MaxLineLength:AssessmentController.kt$AssessmentController$@Parameter(description = "Timestamp until which the latest assessment should be returned", `in` = ParameterIn.QUERY, example = "1706879012")</ID>
    <ID>MaxLineLength:AssessmentController.kt$AssessmentController$ApiResponse(responseCode = "404", description = "No assessment was found for the specified criteria", content = arrayOf(Content()))</ID>
    <ID>MaxLineLength:AssessmentControllerTest.kt$AssessmentControllerTest.Answers$assessment.oasysAssessments = listOf(OasysAssessment(oasysAssessmentPk = UUID.randomUUID().toString(), assessment = assessment))</ID>
    <ID>MaxLineLength:AssessmentControllerTest.kt$AssessmentControllerTest.GetAssessment$assertThat(response?.assessment?.values?.map { it.value }).isEqualTo(latestValidatedVersion.answers.values.map { it.value })</ID>
    <ID>MaxLineLength:AssessmentControllerTest.kt$AssessmentControllerTest.GetAssessment$assertThat(response?.assessment?.values?.map { it.value }).isEqualTo(latestVersion.answers.values.map { it.value })</ID>
    <ID>MaxLineLength:AssessmentControllerTest.kt$AssessmentControllerTest.GetAssessment$assertThat(response?.assessment?.values?.map { it.value }).isEqualTo(oldValidatedVersion.answers.values.map { it.value })</ID>
    <ID>MaxLineLength:AssessmentControllerTest.kt$AssessmentControllerTest.GetAssessment$assertThat(response?.metaData?.oasys_pks).isEqualTo(listOf(oasysAss1.oasysAssessmentPk, oasysAss2.oasysAssessmentPk))</ID>
    <ID>MaxLineLength:AssessmentControllerTest.kt$AssessmentControllerTest.GetAssessment$assertThat(response?.metaData?.versionCreatedAt?.withNano(0)).isEqualTo(latestValidatedVersion.createdAt.withNano(0))</ID>
    <ID>MaxLineLength:AssessmentFormInfo.kt$AssessmentFormInfo$@JoinColumn(name = "assessment_uuid", referencedColumnName = "uuid", unique = true, updatable = false, nullable = false)</ID>
    <ID>MaxLineLength:AssessmentService.kt$AssessmentService$return assessmentRepository.findByUuid(uuid) ?: throw AssessmentNotFoundException("No assessment found with UUID $uuid")</ID>
    <ID>MaxLineLength:AssessmentVersionRepository.kt$AssessmentVersionRepository$interface</ID>
    <ID>MaxLineLength:AssessmentVersionServiceTest.kt$AssessmentVersionServiceTest.UpdateAnswers$verify(exactly = 0) { assessmentVersionRepository.findAll(any&lt;Specification&lt;AssessmentVersion&gt;&gt;(), any&lt;PageRequest&gt;()) }</ID>
    <ID>MaxLineLength:AuthAwareTokenConverter.kt$AuthAwareTokenConverter$private fun isUserGrantType(claims: Map&lt;String, Any?&gt;)</ID>
    <ID>MaxLineLength:AuthAwareTokenConverter.kt$AuthAwareTokenConverter$private val jwtGrantedAuthoritiesConverter: Converter&lt;Jwt, Collection&lt;GrantedAuthority&gt;&gt; = JwtGrantedAuthoritiesConverter()</ID>
    <ID>MaxLineLength:DataMappingServiceTest.kt$DataMappingServiceTest.GetOasysEquivalent$every { mockMappingProvider.get(match { formInfo -&gt; formInfo.formVersion === "1.0" }) } returns setOf(mockSectionMapping)</ID>
    <ID>MaxLineLength:DataMappingServiceTest.kt$DataMappingServiceTest.GetOasysEquivalent$every { mockMappingProvider.get(match { formInfo -&gt; formInfo.formVersion === "1.0" }) } returns setOf(mockSectionMapping, mockSectionMappingTwo)</ID>
    <ID>MaxLineLength:DataMappingServiceTest.kt$DataMappingServiceTest.GetOasysEquivalent$every { mockSectionMappingTwo.map(any&lt;AnswersProvider&gt;()) } returns mapOf("oasys-key-2" to listOf("val-2", "val-3"))</ID>
    <ID>MaxLineLength:OasysAssessmentAlreadyExistsException.kt$OasysAssessmentAlreadyExistsException : ConflictException</ID>
    <ID>MaxLineLength:OasysAssessmentAlreadyLockedException.kt$OasysAssessmentAlreadyLockedException : ConflictException</ID>
    <ID>MaxLineLength:OasysAssessmentController.kt$OasysAssessmentController$ApiResponse(responseCode = "409", description = "An association already exists for the provided OASys Assessment PK", content = arrayOf(Content()))</ID>
    <ID>MaxLineLength:OasysAssessmentController.kt$OasysAssessmentController$ApiResponse(responseCode = "409", description = "The latest version of the assessment has already been locked", content = arrayOf(Content()))</ID>
    <ID>MaxLineLength:OasysAssessmentService.kt$OasysAssessmentService$assessment.oasysAssessments = listOf(OasysAssessment(oasysAssessmentPk = oasysAssessmentPk, assessment = assessment))</ID>
    <ID>MaxLineLength:OasysAssessmentService.kt$OasysAssessmentService$return oasysAssessmentRepository.findByOasysAssessmentPk(oasysAssessmentPk) ?: createAssessmentWithOasysId(oasysAssessmentPk)</ID>
    <ID>MaxLineLength:OasysAssessmentService.kt$OasysAssessmentService$val persistedAssessment = assessmentService.save(assessment).also { log.info("Assessment created for OASys PK $oasysAssessmentPk") }</ID>
    <ID>MaxLineLength:SessionResponse.kt$SessionResponse.Companion$fun from(session: Session, assessment: Assessment)</ID>
    <ID>MaxLineLength:SessionService.kt$SessionService$OneTimeLinkResponse("${applicationConfig.formBaseUrl}/sbna-poc/$majorVersion/$minorVersion/start?sessionId=${it.linkUuid}")</ID>
    <ID>SpreadOperator:HmppsStrengthsBasedNeedsAssessmentsApi.kt$(*args)</ID>
    <ID>UnusedParameter:OpenApiConfiguration.kt$OpenApiConfiguration$buildProperties: BuildProperties</ID>
    <ID>UnusedParameter:SessionService.kt$SessionService$oasysSessionId: String</ID>
    <ID>UnusedParameter:SubjectController.kt$SubjectController$@Parameter(description = "OASys assessment ID", required = true, example = "ABC2134567890") @PathVariable assessmentUuid: UUID</ID>
  </CurrentIssues>
</SmellBaseline>
